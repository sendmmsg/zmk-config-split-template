/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "swedish_keys.h"

#define BASE 0
#define MOUSE 1
#define MOVE 2
#define BRACKETS 3
#define SYMBOLS 4
#define NUMBERS 5
#define FNUMBERS 6
#define WINDOW 7
#define SHORT 8

/ {
  behaviors {
        // Customized mod_tap and layer_tap:
        // - Enables quick_tap. Useful for backspace/space.
        // - Switch to balanced flavor to allow for fast (back)space + character rollovers.
        mt_: custom_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
                        quick_tap_ms = <500>;
            bindings = <&kp>, <&kp>;
        };
        lt_: custom_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
                        quick_tap_ms = <500>;
            bindings = <&mo>, <&kp>;
        };
    };
  keymap {
		compatible = "zmk,keymap";

		default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
//                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |
			bindings = <
	&kp TAB   &kp Q &kp W       &kp E        &kp R        &kp T                                          &kp Y        &kp U         &kp I       &kp O       &kp P               &kp SE_AO
	&kp ESC   &kp A &_mt LALT S &_mt LSHFT D &_mt LCTRL F &kp G                                          &kp H        &_mt RCTRL J  &_mt LSHT K &_mt RALT L &_lt BRACKETS SE_OE &kp SE_AE
	&kp LSHFT &kp Z &kp X       &kp C        &kp V        &kp B &kp LSHFT &kp LSHFT &kp LSHFT &kp LSHFT  &kp N        &kp M         &kp COMMA   &kp DOT     &kp FSLH            &kp RCTRL
	                 &kp LGUI &kp DEL &kp SPACE &kp BSPC &kp ESC                                         &mo FNUMBERS &_lt MOVE DEL &kp RET     &kp BSPC    &kp RALT
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
		};

		mouse_layer {
        // mouse buttons missing, need to merge a mouse-thingy  PR  ?
			bindings = <
	&trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	                 &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
			>;
		};
		move_layer {
        // media keys missing
			bindings = <
	&trans &trans &trans &trans &kp PG_UP   &trans                             &trans   &trans   &kp UP   &trans &trans &trans
	&trans &trans &trans &trans &kp PG_DOWN &trans                             &kp BSPC &kp LEFT &kp DOWN &kp RIGHT &kp DEL &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	                 &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
			>;
		};
		brackets_layer {
			bindings = <
	&trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	                 &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
			>;
		};
		numbers_layer {
			bindings = <
	&trans &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_N4 &kp KP_N5                              &kp KP_N6    &kp KP_N7  &kp KP_N8 &kp KP_N9 &kp KP_N0  &trans
	&trans &trans    &trans    &trans    &trans    &trans                                 &kp KP_MINUS &kp KP_N4  &kp KP_N5 &kp KP_N6 &kp COMMA  &kp KP_MULTIPLY
	&trans &trans    &trans    &trans    &trans    &trans &trans &trans &trans &trans     &kp KP_PLUS  &kp KP_N1  &kp KP_N2 &kp KP_N3 &kp KP_DOT &kp KP_DIVIDE
	                 &trans &trans &trans &trans &trans                                                &kp KP_DOT &kp KP_N0 &trans &trans &trans
			>;
		};

	};
};
